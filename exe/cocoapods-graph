#!/usr/bin/env ruby

# Print version immediately if requested
if ARGV.include?("-v") || ARGV.include?("--version")
  require_relative '../lib/cocoapods_graph/version'
  puts CocoaPodsGraph::VERSION
  exit
end
# frozen_string_literal: true

require 'optparse'
 $LOAD_PATH.unshift(File.expand_path('../../lib', __FILE__))
 require 'cocoapods_graph'

module CocoaPodsGraph
  class CLI
    VERSION = CocoaPodsGraph::VERSION

    def self.run
  options = {}
      
      # Print version immediately if requested
      if ARGV.include?('-v') || ARGV.include?('--version')
        puts VERSION
        exit
      end

      parser = OptionParser.new do |parser|
        parser.banner = 'Usage: cocoapods-graph [options]'
        parser.on('-f', '--file FILE', 'Specify Podfile.lock file path') { |f| options[:file] = f }
        parser.on('--show', 'Print dependencies on console') { options[:show] = true }
        parser.on('--json', 'Save dependencies to JSON file') { options[:json] = true }
        parser.on('--html', 'Save dependencies to interactive HTML wheel graph') { options[:html] = true }
        parser.on('-h', '--help', 'Show this help message') do
          puts parser
          puts "\nExamples:"
          puts "  cocoapods-graph -f Podfile.lock --html    # Generate interactive HTML report"
          puts "  cocoapods-graph -f Podfile.lock --json    # Generate JSON output"  
          puts "  cocoapods-graph -f Podfile.lock --show    # Print to console"
          puts "  cocoapods-graph -f Podfile.lock --html --json  # Generate both HTML and JSON"
          exit
        end
      end
      
      begin
        parser.parse!
      rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
        puts "Error: #{e.message}"
        puts parser
        exit(1)
      end

      if ARGV.empty? && options.empty?
        puts "#{PROJECT_NAME} - #{VERSION} (#{PROJECT_DESCRIPTION})"
        puts "by #{PROJECT_AUTHOR_WITH_EMAIL}"
        puts 'Type: cocoapods-graph -h to see more information'
        exit(1)
      end

      if options[:file] && !options[:file].empty?
        # Add .lock extension if not present
        options[:file] += '.lock' unless options[:file].include?('.lock')

        unless File.exist?(options[:file])
          puts "Error: File '#{options[:file]}' not found"
          exit(1)
        end

  result = CocoaPodsGraph::Generator.parse_lock_file(options[:file])

        any_output = false
        if options[:show]
          puts 'Printing dependencies...'
          result.each(&:print_object)
          any_output = true
        end

        if options[:json]
          puts 'Saving JSON file...'
          CocoaPodsGraph::Generator.save_json_file(result, options[:file])
          any_output = true
        end

        if options[:html]
          puts 'Saving HTML file...'
          CocoaPodsGraph::Generator.save_html_wheel_file(result, options[:file])
          any_output = true
        end

        if any_output
        else
          puts 'You must select an output option (--show | --json | --html)'
          exit(1)
        end
      else
        puts 'Error: Please specify a Podfile.lock file with -f option'
        exit(1)
      end
    end
  end
end

CocoaPodsGraph::CLI.run
